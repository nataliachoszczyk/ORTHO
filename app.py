import streamlit as st
import pandas as pd
from funcs import generate_plots

# Ustawienia strony
st.set_page_config(page_title="ORTHO", layout="wide")

# Tytu≈Ç g≈Ç√≥wny
st.title("üí° ORTHO")
st.subheader("Analiza przyjmowanych strategii w edukacyjnej grze interaktywnej.")

# Lista nazw zak≈Çadek
tab_names = ["Home", "Wszystkie Tory"] + [f"Tor {i}" for i in range(1, 8)]

# Tworzenie zak≈Çadek
tabs = st.tabs(tab_names)

# Zawarto≈õƒá zak≈Çadki G≈Ç√≥wna
with tabs[0]:
    st.header("Wprowadzenie")
    st.markdown("""
    Witamy w interaktywnej analizie gry edukacyjnej **ORTHO**, dostƒôpnej w Centrum Nauki Kopernik. ORTHO to kooperacyjna gra dla dw√≥ch graczy, kt√≥rej celem jest wsp√≥lne przeprowadzenie kulki przez wirtualny tor. Jeden z graczy kontroluje ruch w osi **X**, a drugi w osi **Y** ‚Äî sukces wymaga wsp√≥≈Çpracy, komunikacji oraz dobrej koordynacji.

    Gra stanowi ≈õwietne wprowadzenie do **pojƒôcia uk≈Çadu wsp√≥≈Çrzƒôdnych** i rozwija umiejƒôtno≈õci miƒôkkie, takie jak **cierpliwo≈õƒá i wsp√≥≈Çpraca**.

    ### üîç Cel analizy

    Nasza analiza koncentruje siƒô na **poziomie trudno≈õci 0**, czyli podstawowym wariancie gry, w kt√≥rym ka≈ºdy gracz manualnie steruje ruchem wy≈ÇƒÖcznie w jednej osi.

    ### üìä Co badamy?

    Analizujemy m.in.:
    - **strategie ruchu** ‚Äì np. czy gracze poruszajƒÖ siƒô p≈Çynnie, czy "schodkowo",
    - **metryki przej≈õcia toru** ‚Äì takie jak p≈Çynno≈õƒá ruchu (`smoothness`) czy stosunek schodkowych ruch√≥w (`stair ratio`),
    - **r√≥≈ºnice miƒôdzy torami** ‚Äì jak strategie zmieniajƒÖ siƒô w zale≈ºno≈õci od typu toru.

    Celem tej analizy jest lepsze zrozumienie, jak u≈ºytkownicy radzƒÖ sobie z grƒÖ, oraz jakie strategie prowadzƒÖ do skutecznej wsp√≥≈Çpracy i uko≈Ñczenia poziomu.
    """)

# Zawarto≈õƒá zak≈Çadki Wszystkie Tory
with tabs[1]:
    st.header("Wszystkie Tory")
    st.markdown("Tutaj znajdujƒÖ siƒô zbiorcze dane lub wizualizacje dotyczƒÖce wszystkich tor√≥w.")
    st.image(f"app_plots/tory.png", caption=f"Tory w grze ORTHO", use_container_width=True)

# Zak≈Çadki Tor 1 ‚Äì Tor 7
stats_by_track = {
    1: {"Liczba wszystkich gier": 19631, "Liczba uko≈Ñczonych gier": 7936, "Procent uko≈Ñczonych gier": "40.43%", "≈öredni czas gry (s)": 24.7, "≈öredni czas uko≈Ñczonej gry (s)": 45.44, "≈öredni procent uko≈Ñczenia gry": "62.16%"},
    2: {"Liczba wszystkich gier": 22999, "Liczba uko≈Ñczonych gier": 8079, "Procent uko≈Ñczonych gier": "35.13%", "≈öredni czas gry (s)": 21.66, "≈öredni czas uko≈Ñczonej gry (s)": 44.4, "≈öredni procent uko≈Ñczenia gry": "52.58%"},
    3: {"Liczba wszystkich gier": 20679, "Liczba uko≈Ñczonych gier": 8842, "Procent uko≈Ñczonych gier": "42.76%", "≈öredni czas gry (s)": 15.4, "≈öredni czas uko≈Ñczonej gry (s)": 27.71, "≈öredni procent uko≈Ñczenia gry": "61.85%"},
    4: {"Liczba wszystkich gier": 418, "Liczba uko≈Ñczonych gier": 168, "Procent uko≈Ñczonych gier": "40.19%", "≈öredni czas gry (s)": 18.22, "≈öredni czas uko≈Ñczonej gry (s)": 38.31, "≈öredni procent uko≈Ñczenia gry": "56.37%"},
    5: {"Liczba wszystkich gier": 291, "Liczba uko≈Ñczonych gier": 152, "Procent uko≈Ñczonych gier": "52.23%", "≈öredni czas gry (s)": 21.29, "≈öredni czas uko≈Ñczonej gry (s)": 33.11, "≈öredni procent uko≈Ñczenia gry": "65.67%"},
    6: {"Liczba wszystkich gier": 262, "Liczba uko≈Ñczonych gier": 182, "Procent uko≈Ñczonych gier": "69.47%", "≈öredni czas gry (s)": 12.47, "≈öredni czas uko≈Ñczonej gry (s)": 15.47, "≈öredni procent uko≈Ñczenia gry": "77.33%"},
    7: {"Liczba wszystkich gier": 424, "Liczba uko≈Ñczonych gier": 174, "Procent uko≈Ñczonych gier": "41.04%", "≈öredni czas gry (s)": 16.54, "≈öredni czas uko≈Ñczonej gry (s)": 30.65, "≈öredni procent uko≈Ñczenia gry": "58.42%"}
}


for i in range(2, 9):  # Indeksy tabs[2] do tabs[8]
    with tabs[i]:
        tor_num = i - 1
        st.header(f"Tor {tor_num} ‚Äì Analiza i Obraz")

        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.image(f"app_plots/tor{tor_num}.png", caption=f"Tor {tor_num}", width=300, use_container_width="auto")
        with col2:
            st.image(f"app_plots/tor{tor_num}_ex.png", caption=f"Tor {tor_num} ‚Äì przyk≈Çadowa gra", use_container_width=True)
        with col3:
            selected_stats = stats_by_track[i-1]
            df_stats = pd.DataFrame({
                "Statystyka": list(selected_stats.keys()),
                "Warto≈õƒá": list(selected_stats.values())
            })

            st.subheader(f"üìä Podstawowe statystyki")
            st.dataframe(df_stats, use_container_width=True)

        col4, col5 = st.columns([1, 1])
        with col4:
            st.image(f"app_plots/min_smoothness_{tor_num}.png", caption=f"Najbardziej g≈Çadki tor", use_container_width=True)
            st.image(f"app_plots/min_stair_ratio_{tor_num}.png", caption=f"Tor z najmniejszym stair_ratio", use_container_width=True)

        with col5:
            st.image(f"app_plots/max_smoothness_{tor_num}.png", caption=f"Najmniej g≈Çadki tor", use_container_width=True)
            st.image(f"app_plots/max_stair_ratio_{tor_num}.png", caption=f"Tor z najwiƒôkszym stair_ratio", use_container_width=True)
        st.markdown("Wykresy zosta≈Çy wykonane na podstawie gier wykonanych w minimum 50%")
        with st.spinner("Wykresy metryk", show_time=True):
            metrics_plots = generate_plots(f"data/filtered_records_{tor_num}_metrics.jsonl")
        st.subheader("üìà Wykresy metryk")
        col6, col7 = st.columns([1, 1])
        with col6:
            st.pyplot(metrics_plots["hist_smoothness"])
            st.pyplot(metrics_plots["smoothness_time_plot"])
            st.pyplot(metrics_plots["scatter_plot"])   
        with col7:  
            st.pyplot(metrics_plots["hist_stair_ratio"])
            st.pyplot(metrics_plots["stair_ratio_time_plot"])
         
