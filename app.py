import streamlit as st
import pandas as pd
from funcs import generate_metrics_plots, get_metrics_plots, generate_all_tracks_plots, get_all_tracks_plots, generate_correlation_analysis_plots, get_correlation_analysis_plots
import matplotlib.pyplot as plt
import os
print("Current working directory:", os.getcwd())
# Ustawienia strony
st.set_page_config(page_title="ORTHO", layout="wide")

# Tytu≈Ç g≈Ç√≥wny
st.title("üí° ORTHO")
st.subheader("Analiza przyjmowanych strategii w edukacyjnej grze interaktywnej.")

# Lista nazw zak≈Çadek
tab_names = ["Home", "Wszystkie Tory"] + [f"Tor {i}" for i in range(1, 8)]

# Tworzenie zak≈Çadek
tabs = st.tabs(tab_names)


# Zawarto≈õƒá zak≈Çadki G≈Ç√≥wna
with tabs[0]:
    st.header("Wprowadzenie")
    st.markdown("""
    Witamy w interaktywnej analizie gry edukacyjnej **ORTHO**, dostƒôpnej w Centrum Nauki Kopernik. ORTHO to kooperacyjna gra dla dw√≥ch graczy, kt√≥rej celem jest wsp√≥lne przeprowadzenie kulki przez wirtualny tor. Jeden z graczy kontroluje ruch w osi **X**, a drugi w osi **Y** ‚Äî sukces wymaga wsp√≥≈Çpracy, komunikacji oraz dobrej koordynacji.

    Gra stanowi ≈õwietne wprowadzenie do **pojƒôcia uk≈Çadu wsp√≥≈Çrzƒôdnych** i rozwija umiejƒôtno≈õci miƒôkkie, takie jak **cierpliwo≈õƒá i wsp√≥≈Çpraca**.

    ### üîç Cel analizy

    Nasza analiza koncentruje siƒô na **poziomie trudno≈õci 0**, czyli podstawowym wariancie gry, w kt√≥rym ka≈ºdy gracz manualnie steruje ruchem wy≈ÇƒÖcznie w jednej osi.

    ### üìä Co badamy?

    Analizujemy m.in.:
    - **strategie ruchu** ‚Äì np. czy gracze poruszajƒÖ siƒô p≈Çynnie, czy "schodkowo",
    - **metryki przej≈õcia toru** ‚Äì takie jak p≈Çynno≈õƒá ruchu (`smoothness`) czy stosunek schodkowych ruch√≥w (`stair_ratio`),
    - **r√≥≈ºnice miƒôdzy torami** ‚Äì jak strategie zmieniajƒÖ siƒô w zale≈ºno≈õci od typu toru.

    Celem tej analizy jest lepsze zrozumienie, jak u≈ºytkownicy radzƒÖ sobie z grƒÖ, oraz jakie strategie prowadzƒÖ do skutecznej wsp√≥≈Çpracy i uko≈Ñczenia poziomu.
             
    ### üìà Metryki
    - `smoothness`: Mierzy p≈Çynno≈õƒá ruchu gracza. Warto≈õci bliskie 0 oznaczajƒÖ p≈Çynny ruch, podczas gdy wiƒôksze warto≈õci wskazujƒÖ ruch z ostrymi zmianami kierunku.
    - `stair_ratio`: Mierzy stosunek schodkowych ruch√≥w do ca≈Çkowitych ruch√≥w. Warto≈õci bliskie 0 oznaczajƒÖ p≈Çynny ruch, podczas gdy warto≈õci bliskie 1 wskazujƒÖ na "schodkowy" ruch.
    """)
    calculate_toggle = st.toggle("oblicz wszystko od nowa")

# Zak≈Çadki Tor 1 ‚Äì Tor 7
stats_by_track = {
    1: {"Liczba wszystkich gier": 19631, "Liczba uko≈Ñczonych gier": 7936, "Procent uko≈Ñczonych gier": "40.43%", "≈öredni czas gry (s)": 24.7, "≈öredni czas uko≈Ñczonej gry (s)": 45.44, "≈öredni procent uko≈Ñczenia gry": "62.16%"},
    2: {"Liczba wszystkich gier": 22999, "Liczba uko≈Ñczonych gier": 8079, "Procent uko≈Ñczonych gier": "35.13%", "≈öredni czas gry (s)": 21.66, "≈öredni czas uko≈Ñczonej gry (s)": 44.4, "≈öredni procent uko≈Ñczenia gry": "52.58%"},
    3: {"Liczba wszystkich gier": 20679, "Liczba uko≈Ñczonych gier": 8842, "Procent uko≈Ñczonych gier": "42.76%", "≈öredni czas gry (s)": 15.4, "≈öredni czas uko≈Ñczonej gry (s)": 27.71, "≈öredni procent uko≈Ñczenia gry": "61.85%"},
    4: {"Liczba wszystkich gier": 418, "Liczba uko≈Ñczonych gier": 168, "Procent uko≈Ñczonych gier": "40.19%", "≈öredni czas gry (s)": 18.22, "≈öredni czas uko≈Ñczonej gry (s)": 38.31, "≈öredni procent uko≈Ñczenia gry": "56.37%"},
    5: {"Liczba wszystkich gier": 291, "Liczba uko≈Ñczonych gier": 152, "Procent uko≈Ñczonych gier": "52.23%", "≈öredni czas gry (s)": 21.29, "≈öredni czas uko≈Ñczonej gry (s)": 33.11, "≈öredni procent uko≈Ñczenia gry": "65.67%"},
    6: {"Liczba wszystkich gier": 262, "Liczba uko≈Ñczonych gier": 182, "Procent uko≈Ñczonych gier": "69.47%", "≈öredni czas gry (s)": 12.47, "≈öredni czas uko≈Ñczonej gry (s)": 15.47, "≈öredni procent uko≈Ñczenia gry": "77.33%"},
    7: {"Liczba wszystkich gier": 424, "Liczba uko≈Ñczonych gier": 174, "Procent uko≈Ñczonych gier": "41.04%", "≈öredni czas gry (s)": 16.54, "≈öredni czas uko≈Ñczonej gry (s)": 30.65, "≈öredni procent uko≈Ñczenia gry": "58.42%"}
}

all_stats = {
    "Liczba wszystkich gier": 64704, "Liczba uko≈Ñczonych gier": 25533, "Procent uko≈Ñczonych gier": "39.46%", "≈öredni czas gry (s)": 20.49, "≈öredni czas uko≈Ñczonej gry (s)": 38.54, "≈öredni procent uko≈Ñczenia gry": "58.67%"}


####################### WSZYSTKIE TORY #######################
with tabs[1]:
    st.header("Wszystkie Tory")
    st.markdown("Wykresy zosta≈Çy wykonane na podstawie gier wykonanych w minimum 25%. Pozwala nam to wykluczyƒá gry, kt√≥re ledwo zosta≈Çy rozpoczƒôte i nie jeste≈õmy w stanie wyciƒÖgnƒÖƒá na ich podstawie istotnych wniosk√≥w.")
    st.image(f"app_plots/tory.png", caption=f"Tory w grze ORTHO", use_container_width=True)

    with st.spinner("Wykresy metryk", show_time=True):
        if calculate_toggle:
            all_metrics_plots = generate_metrics_plots("1_to_7", completed=False)
            all_tracks_plots = generate_all_tracks_plots()
            correlation_analysis_plots = generate_correlation_analysis_plots()
        else:
            all_metrics_plots = get_metrics_plots("1_to_7")
            all_tracks_plots = get_all_tracks_plots()
            correlation_analysis_plots = get_correlation_analysis_plots()

    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        df_stats = pd.DataFrame({
            "Statystyka": list(all_stats.keys()),
            "Warto≈õƒá": list(all_stats.values())
        })

        st.subheader(f"üìä Podstawowe statystyki")
        st.dataframe(df_stats, use_container_width=True)
    with col2:
        st.pyplot(all_metrics_plots["hist_smoothness"])
    with col3:
        st.pyplot(all_metrics_plots["hist_stair_ratio"])
    
    st.subheader("Analiza uko≈Ñczenia gry w zale≈ºno≈õci od warto≈õci metryk")
    col_s1, col_s2, col_s3 = st.columns([1, 1, 1])
    with col_s1:
        st.pyplot(all_tracks_plots["hist_smoothness_true"])
    with col_s2:
        st.pyplot(all_tracks_plots["hist_smoothness_false"])
    with col_s3:
        st.pyplot(all_tracks_plots["scatter_smoothness_vs_stair_ratio_colored"])

    col_s4, col_s5, col_s6 = st.columns([1, 1, 1])
    with col_s4:
        st.pyplot(all_tracks_plots["hist_stair_ratio_true"])
    with col_s5:
        st.pyplot(all_tracks_plots["hist_stair_ratio_false"])
    with col_s6:
        st.pyplot(all_tracks_plots["scatter_smoothness_vs_stair_ratio_gradient"])

    col_s7, col_s8, col_s9 = st.columns([1, 1, 1])
    with col_s7:
        st.pyplot(correlation_analysis_plots["boxplot_time"])
    with col_s8:
        st.pyplot(correlation_analysis_plots["boxplot_smoothness"])
    with col_s9:
        st.pyplot(correlation_analysis_plots["boxplot_stair_ratio"])
    
    col7, col8 = st.columns([1, 1])
    with col7:
        st.pyplot(correlation_analysis_plots["pearson_correlation_matrix"])
    with col8:
        st.pyplot(correlation_analysis_plots["spearman_correlation_matrix"])



    
####################### POSZCZEG√ìLNE TORY #######################
for i in range(2, 9):
    with tabs[i]:
        tor_num = i - 1
        st.header(f"Tor {tor_num} ‚Äì Analiza i Obraz")

        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.image(f"app_plots/tor{tor_num}.png", caption=f"Tor {tor_num}", width=300, use_container_width="auto")
        with col2:
            st.image(f"app_plots/tor{tor_num}_ex.png", caption=f"Tor {tor_num} ‚Äì przyk≈Çadowa gra", use_container_width=True)
        with col3:
            selected_stats = stats_by_track[i-1]
            df_stats = pd.DataFrame({
                "Statystyka": list(selected_stats.keys()),
                "Warto≈õƒá": list(selected_stats.values())
            })

            st.subheader(f"üìä Podstawowe statystyki")
            st.dataframe(df_stats, use_container_width=True)
        st.subheader("üìâ Wykresy dla metryki `smoothness` i `stair_ratio`")
        st.markdown("Wykresy zosta≈Çy wykonane na podstawie gier wykonanych w minimum 50%, a rozk≈Çady metryk sƒÖ obliczane na podstawie gier uko≈Ñczonych w 100%.")

        with st.spinner("Wykresy metryk", show_time=True):
            if calculate_toggle:
                metrics_plots = generate_metrics_plots(tor_num)
            else:
                metrics_plots = get_metrics_plots(tor_num)

        col4, col5, col6 = st.columns([1, 1, 1])
        with col4:
            st.image(f"app_plots/min_smoothness_{tor_num}.png", caption=f"Najbardziej g≈Çadki tor", use_container_width=True)
            st.image(f"app_plots/min_stair_ratio_{tor_num}.png", caption=f"Tor z najmniejszym stair_ratio", use_container_width=True)

        with col5:
            st.image(f"app_plots/max_smoothness_{tor_num}.png", caption=f"Najmniej g≈Çadki tor", use_container_width=True)
            st.image(f"app_plots/max_stair_ratio_{tor_num}.png", caption=f"Tor z najwiƒôkszym stair_ratio", use_container_width=True)

        with col6:
            st.pyplot(metrics_plots["hist_smoothness"])
            st.pyplot(metrics_plots["hist_stair_ratio"])

        col7, col8, col9 = st.columns([1, 1, 1])
        with col7:
            st.pyplot(metrics_plots["smoothness_time_plot"])
        with col8:
            st.pyplot(metrics_plots["stair_ratio_time_plot"])
        with col9:
             st.pyplot(metrics_plots["scatter_plot"])